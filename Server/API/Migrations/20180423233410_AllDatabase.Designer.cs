// <auto-generated />
using Bilkaup.Repositories;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace Bilkaup.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20180423233410_AllDatabase")]
    partial class AllDatabase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Bilkaup.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Bilkaup.Models.EntityModels.Car", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CC");

                    b.Property<int>("CO2");

                    b.Property<string>("Color");

                    b.Property<int>("Cylinders");

                    b.Property<int>("Doors");

                    b.Property<int>("DriveID");

                    b.Property<int>("EngineWeight");

                    b.Property<int>("Horsepower");

                    b.Property<bool>("Hybrid");

                    b.Property<int>("InchWheels");

                    b.Property<bool>("Injection");

                    b.Property<string>("LicenceNumber")
                        .IsRequired();

                    b.Property<int>("ManufacturerID");

                    b.Property<int>("Milage");

                    b.Property<int>("ModelID");

                    b.Property<int>("ModelTypeID");

                    b.Property<string>("MoreInfo");

                    b.Property<string>("NewRegistered");

                    b.Property<string>("NextCheckup");

                    b.Property<int>("Seating");

                    b.Property<string>("Status");

                    b.Property<int>("TransmissionID");

                    b.Property<int>("Weight");

                    b.Property<string>("Year")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("Bilkaup.Models.EntityModels.CarSale", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Accepted");

                    b.Property<bool>("Active");

                    b.Property<string>("Address");

                    b.Property<DateTime>("DateOfApplication");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("IdentityID");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("PhoneNum");

                    b.Property<string>("SSN")
                        .IsRequired()
                        .HasMaxLength(11);

                    b.Property<string>("Webpage");

                    b.HasKey("ID");

                    b.HasIndex("IdentityID");

                    b.ToTable("CarSales");
                });

            modelBuilder.Entity("Bilkaup.Models.EntityModels.CarSaleOpening", b =>
                {
                    b.Property<int>("CarSaleID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Friday");

                    b.Property<string>("Monday");

                    b.Property<string>("OtherInfo");

                    b.Property<string>("Saturday");

                    b.Property<string>("Sunday");

                    b.Property<string>("Thursday");

                    b.Property<string>("Tuesday");

                    b.Property<string>("Wednesday");

                    b.HasKey("CarSaleID");

                    b.ToTable("CarSaleOpenings");
                });

            modelBuilder.Entity("Bilkaup.Models.EntityModels.Drive", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("Drives");
                });

            modelBuilder.Entity("Bilkaup.Models.EntityModels.DriveSteeringInfo", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("DriveSteeringInfos");
                });

            modelBuilder.Entity("Bilkaup.Models.EntityModels.DriveSteeringInfoCar", b =>
                {
                    b.Property<int>("CarID");

                    b.Property<int>("DriveSteeringID");

                    b.HasKey("CarID", "DriveSteeringID");

                    b.ToTable("DriveSteeringInfoCars");
                });

            modelBuilder.Entity("Bilkaup.Models.EntityModels.ExtraFeature", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("ExtraFeatures");
                });

            modelBuilder.Entity("Bilkaup.Models.EntityModels.ExtraFeaturesCar", b =>
                {
                    b.Property<int>("CarID");

                    b.Property<int>("ExtraFeaturesID");

                    b.HasKey("CarID", "ExtraFeaturesID");

                    b.ToTable("ExtraFeaturesCars");
                });

            modelBuilder.Entity("Bilkaup.Models.EntityModels.FuelType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Fuel")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("FuelTypes");
                });

            modelBuilder.Entity("Bilkaup.Models.EntityModels.FuelTypeCar", b =>
                {
                    b.Property<int>("CarID");

                    b.Property<int>("FuelTypeID");

                    b.HasKey("CarID", "FuelTypeID");

                    b.ToTable("FuelTypeCars");
                });

            modelBuilder.Entity("Bilkaup.Models.EntityModels.Manufacturer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("Manufacturers");
                });

            modelBuilder.Entity("Bilkaup.Models.EntityModels.Model", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ManufID");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("Models");
                });

            modelBuilder.Entity("Bilkaup.Models.EntityModels.ModelType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ManufID");

                    b.Property<int>("ModelID");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasAlternateKey("ManufID", "ModelID");

                    b.ToTable("ModelTypes");
                });

            modelBuilder.Entity("Bilkaup.Models.EntityModels.PassengerSpace", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("PassengerSpaces");
                });

            modelBuilder.Entity("Bilkaup.Models.EntityModels.PassengerSpaceCar", b =>
                {
                    b.Property<int>("PassengerSpaceID");

                    b.Property<int>("CarID");

                    b.HasKey("PassengerSpaceID", "CarID");

                    b.HasAlternateKey("CarID", "PassengerSpaceID");

                    b.ToTable("PassengerSpaceCars");
                });

            modelBuilder.Entity("Bilkaup.Models.EntityModels.Picture", b =>
                {
                    b.Property<int>("CarID");

                    b.Property<string>("Link");

                    b.Property<bool>("Primary");

                    b.HasKey("CarID", "Link");

                    b.HasAlternateKey("CarID");

                    b.ToTable("Pictures");
                });

            modelBuilder.Entity("Bilkaup.Models.EntityModels.SaleInfo", b =>
                {
                    b.Property<int>("CarID");

                    b.Property<int>("SerialNum")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CarSaleID");

                    b.Property<DateTime>("DateOfSale");

                    b.Property<DateTime>("DateOfUpdate");

                    b.Property<DateTime>("DateOnSale");

                    b.Property<int>("OfferPrice");

                    b.Property<bool>("OnSite");

                    b.Property<int>("Price");

                    b.Property<int>("SellerID");

                    b.HasKey("CarID", "SerialNum");

                    b.HasAlternateKey("CarID", "CarSaleID", "SellerID", "SerialNum");

                    b.ToTable("SaleInfos");
                });

            modelBuilder.Entity("Bilkaup.Models.EntityModels.Seller", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("PhoneNum")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("Seller");
                });

            modelBuilder.Entity("Bilkaup.Models.EntityModels.SellerCar", b =>
                {
                    b.Property<int>("CarID");

                    b.Property<int>("SellerID");

                    b.Property<string>("MoreInfo");

                    b.Property<bool>("SwitchingForCheaper");

                    b.Property<bool>("SwitchingForExpensive");

                    b.HasKey("CarID", "SellerID");

                    b.ToTable("SellerCars");
                });

            modelBuilder.Entity("Bilkaup.Models.EntityModels.Transmission", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("Transmissions");
                });

            modelBuilder.Entity("Bilkaup.Models.EntityModels.Wheel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("Wheels");
                });

            modelBuilder.Entity("Bilkaup.Models.EntityModels.WheelCar", b =>
                {
                    b.Property<int>("CarID");

                    b.Property<string>("WheelID");

                    b.Property<int>("Quantity");

                    b.HasKey("CarID", "WheelID");

                    b.ToTable("WheelCars");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Bilkaup.Models.EntityModels.CarSale", b =>
                {
                    b.HasOne("Bilkaup.Models.ApplicationUser", "Identity")
                        .WithMany()
                        .HasForeignKey("IdentityID");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Bilkaup.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Bilkaup.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Bilkaup.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Bilkaup.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
